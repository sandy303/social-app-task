// 1
app.post('/users/', (req,res) =>
{ 
  const user = 
  {
    id: db.Collection('User').length() + 1,
    name: req.body.name,
    email: req.body.email,
    createdAt: req.body.createdAt,
  };

    db.Collection('User').insertOne(user);
    if (db.Collection('User').length() <= 0)
    {
      console.log('Nothing inserted');
      res.send('No User Added');
      return;

    }
    else
    {
      console.log('User Created');
      res.send('User Added: ' + user);

    }
  
});

// 2
app.put('/users/:id', (req,res) =>
{
  const user = db.Collection('User').find( ((c: { id: number; }) => c.id == parseInt(req.params.id))); 
  if (!user)
  {
    res.status(404).send('User not found');
    console.log('User not found');
    return;

  }
  else
  {
    res.send('User found: ' + user);

    const userData = 
   {
      id: req.params.id,
      name: req.body.name,
      email: req.body.email,
      createdAt: req.body.createdAt,
   };

    db.Collection('Post').insertOne(userData);
    res.send('Post Repaced: ' + userData);
    console.log('Post replaced');
  }
});

// 3
app.patch('users/:id', (req,res)=>{
  const user = db.Collection('User').find( ((c: { id: number; }) => c.id == parseInt(req.params.id)));
  if (!user)
  {
    res.status(404).send('User not found');
    console.log('User not found');
    return;
  }
  else
  {
    res.send('User found: ' + user);
    console.log('User found');
  }
});

// 4
app.get('/users',(req,res)=>{
  var data: any[] = [];
  var cursor = db.Collection('User').find();
  if (cursor.length() > 0)
  {
    cursor.forEach((element: any) => {
    data.push(element)
    });
  }
  else
  {
    console.log('No data found for a user');
    res.status(404).send('No data found for a user');
  }
  });

  // 5
  app.get('/users/:id',(req,res)=>{
  var cursor = db.Collection('User').find(((c: { id: number; }) => c.id == parseInt(req.params.id)));
  if (!cursor)
  {
    console.log('No user found');
    res.status(404).send('No user found');
    return;

  }
  else
  {
    console.log('User retrieved');
    res.send('User retrieved: ' + cursor);
  }
  });

// 6
app.delete('/users/:id',(req,res)=>{
  const cursor = db.Collection('User').find(((c: { id: number; }) => c.id == parseInt(req.params.id)));
  if (!cursor)
  {
    console.log('No user found');
    res.status(404).send('No user found');
    return;
  }
  else
  {
    const index = db.Collection('User').indexOf(cursor);
    db.Collection('User').splice(index,1);

    console.log('User deleted');
    res.send(cursor);
  }
  });

  // 7
  app.post('/posts/', (req,res) =>
  { 
    const post = 
    {
      id: db.Collection('User').length() + 1,
      body: req.body.name,
      image: req.body.email,
      createdBy: req.body.createdBy,
      createdAt: req.body.createdAt
    };
  
  
      db.Collection('Post').insertOne(post);
      if (db.Collection('Post').length() <= 0)
      {
        console.log('Nothing inserted');
        res.send('No post Added');
        return;
  
      }
      else
      {
        console.log('User Created');
        res.send('post Added: ' + post);
      }
    
  });  

  // 8
  app.put('/post/:id', (req,res) =>
  {
    const post = db.Collection('User').find( ((c: { id: number; }) => c.id == parseInt(req.params.id))); 
    if (!post)
    {
      res.status(404).send('Post not found');
      console.log('Post not found');
      return;

    }
    else
    {
      res.send('Post found: ' + post);
      const postData = 
     {
        id: req.params.id,
        body: req.body.name,
        image: req.body.email,
        createdBy: req.body.createdBy,
        createdAt: req.body.createdAt
     };

      db.Collection('Post').insertOne(postData);
      res.send('Post Repaced: ' + postData);
      console.log('Post replaced');
   }
  });

// 9
app.delete('/users/:id',(req,res)=>{
  const cursor = db.Collection('Post').find(((c: { id: number; }) => c.id == parseInt(req.params.id)));
  if (!cursor)
  {
    console.log('No post found');
    res.status(404).send('No post found');
    return;
  }
  else
  {
    const index = db.Collection('Post').indexOf(cursor);
    db.Collection('Post').splice(index,1);

    console.log('Post deleted');
    res.send(cursor);
  }
  });

// 10
app.get('/posts',(req,res)=>{
  var data: any[] = [];
  var cursor = db.Collection('Post').find().sort({ createdAt: });
  if (cursor.length() > 0)
  {
    cursor.forEach((element: any) => {
    data.push(element)
    });
  }
  else
  {
    console.log('No data found');
    res.status(404).send('No data found');
  }
  });

 // 11

 /////////////////////////////////////////////////////////////////////////////////////////////////////////
 // another way

 import User from '../Model/User'


module.exports = {
    create: (req, res) => {
        let user = new User({
            //id: db.Collection('User').length() + 1,
            name: req.body.name,
            email: req.body.email,
            createdAt: req.body.createdAt,
        })
        user.save()
        // = await
        .then(result => {
            res.json({ success: true, result: result})
        })
        .catch(err => {
             res.json({ success: false, result: err})
            })
    },

        
    retrieve: (req, res) => {
            ParkModel.find()
            .then(park => {
                if (!park) res.json({ success: false, result: "No parks found"})
    
                res.json({ sucess: true, result: result})
            })
            .catch(err => {
                res.json({ success: false, result: err})
            })
        },
    delete: (req, res) => {
            ParkModel.remove({ _id: req.body._id})
            .then(park => {
                if (!park) res.json({ success: false, result: "No park with such ID was found" })
                res.json({ success: true, result: result })
            })
            .catch(err => res.json({success: false, result: err}))
        }
    }

 